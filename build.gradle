plugins {
    id 'java-library'
    id "com.github.ben-manes.versions" version "0.39.0"
}

description = 'Spring Boot Platform'
group = 'ch.frostnova.spring.boot.platform'
version = '1.0.0-SNAPSHOT'

defaultTasks 'clean', 'build'

repositories {
    mavenLocal()
    mavenCentral()
}

subprojects {
    apply plugin: 'java-library'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        withJavadocJar()
        withSourcesJar()
    }
    test {
        useJUnitPlatform()
    }

    artifacts {
        archives sourcesJar
    }
}

ext {
    springBootVersion = '2.5.6'
    h2Version = '1.4.200'
    swaggerVersion = '3.0.0'
    jacksonVersion = '2.13.0'
    jerseyVersion = '3.0.3'
    jaxbVersion = '2.3.0'

    junitVersion = '5.8.1'
    assertjVersion = '3.21.0'
    mockitoVersion = '4.0.0'

    javaValidationVersion = '2.0.1.Final'
    javaxAnnotationVersion = '1.3.2'

    jjwtVersion = '0.9.1'
    javaCacheVersion = '1.1.1'
    ehcacheVersion = '3.9.6'

    libs = [
            testbase      : [
                    "org.junit.jupiter:junit-jupiter-api:$junitVersion",
                    "org.junit.jupiter:junit-jupiter-engine:$junitVersion",
                    "org.assertj:assertj-core:$assertjVersion",
                    "org.mockito:mockito-core:$mockitoVersion"
            ],
            jackson       : [
                    "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion",
                    "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
                    "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
            ],
            validation    : [
                    "javax.validation:validation-api:$javaValidationVersion",
                    "javax.annotation:javax.annotation-api:$javaxAnnotationVersion",
            ],
            swagger       : [
                    "io.springfox:springfox-swagger2:$swaggerVersion"
            ],
            jwt           : [
                    "io.jsonwebtoken:jjwt:${jjwtVersion}"
            ],
            cache         : [
                    "javax.cache:cache-api:$javaCacheVersion",
                    "org.ehcache:ehcache:$ehcacheVersion",
            ],
            springBoot    : [
                    "org.springframework.boot:spring-boot-starter-validation:$springBootVersion",
                    "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion",
                    "org.springframework.boot:spring-boot-starter-web:$springBootVersion",
                    "org.springframework.boot:spring-boot-starter-security:$springBootVersion",
                    "org.springframework.boot:spring-boot-starter-cache:$springBootVersion",
                    "org.springframework.boot:spring-boot-starter-validation:$springBootVersion",
                    "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion",

                    "io.springfox:springfox-boot-starter:$swaggerVersion",
                    "io.springfox:springfox-swagger-ui:$swaggerVersion"
            ],
            springBootTest: [
                    "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
            ]
    ]
}

def isNonStable = { version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}
/*
publishing {
    repositories {
        maven {
            url = "file://${project.rootDir}/repository/" + (version.endsWith('SNAPSHOT') ? 'snapshots' : 'releases')
        }
    }
}
*/